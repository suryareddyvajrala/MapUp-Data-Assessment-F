# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10RAl-YxS1L1Ik6QBMkeDDnItTXGkN4gK
"""

import pandas as pd
data = pd.read_csv("dataset-1.csv")
data2 = pd.read_csv("dataset-2.csv")
df = pd.DataFrame(data)
df2 = pd.DataFrame(data2)

# Question 1: Car Matrix Generation
def generate_car_matrix(df):
    # Extract unique ids from both id_1 and id_2 columns
    unique_ids = sorted(set(df['id_1'].unique()) | set(df['id_2'].unique()))

    # Create an empty DataFrame with ids as indices and columns
    car_matrix = pd.DataFrame(index=unique_ids, columns=unique_ids)

    # Fill the DataFrame with values from the 'car' column
    for _, row in df.iterrows():
        car_matrix.at[row['id_1'], row['id_2']] = row['car']

    # Fill diagonal values with 0
    car_matrix = car_matrix.fillna(0)

    return car_matrix

result_matrix = generate_car_matrix(df)

print(result_matrix)

# Question 2: Car Type Count Calculation
def get_type_count(df):
    # Add a new categorical column 'car_type' based on the values of the 'car' column
    df['car_type'] = pd.cut(df['car'], bins=[-float('inf'), 15, 25, float('inf')],
                            labels=['low', 'medium', 'high'], right=False)

    # Calculate the count of occurrences for each 'car_type' category
    type_counts = df['car_type'].value_counts().to_dict()

    # Sort the dictionary alphabetically based on keys
    sorted_type_counts = dict(sorted(type_counts.items()))

    return sorted_type_counts

type_counts = get_type_count(df)

print(type_counts)

# Question 3: Bus Count Index Retrieval
def get_bus_indexes(df):
    # Calculate the mean value of the 'bus' column
    mean_bus_value = df['bus'].mean()

    # Identify indices where 'bus' values are greater than twice the mean value
    bus_indexes = df[df['bus'] > 2 * mean_bus_value].index.tolist()

    # Sort the indices in ascending order
    bus_indexes.sort()

    return bus_indexes

bus_indexes = get_bus_indexes(df)

print(bus_indexes)

# Question 4: Route Filtering
def filter_routes(df):
    # Calculate the average value of the 'truck' column for each route
    route_avg_truck = df.groupby('route')['truck'].mean()

    # Filter routes where the average of 'truck' column values is greater than 7
    selected_routes = route_avg_truck[route_avg_truck > 7].index.tolist()

    # Sort the list of selected routes
    selected_routes.sort()

    return selected_routes

filtered_routes = filter_routes(df)

print(filtered_routes)

# Question 5: Matrix Value Modification
def multiply_matrix(car_matrix):
    # Apply the specified logic to modify values in the DataFrame
    modified_matrix = car_matrix.applymap(lambda x: x * 0.75 if x > 20 else x * 1.25)

    # Round the values to 1 decimal place
    modified_matrix = modified_matrix.round(1)

    return modified_matrix

car_matrix = generate_car_matrix(df)
modified_matrix = multiply_matrix(car_matrix)

print(modified_matrix)

# Question 6: Time Check
def time_check(df):
    # Convert start and end timestamps to datetime objects
    df['startTimestamp'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'], errors = 'coerce')
    df['endTimestamp'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'], errors = 'coerce')

    # Define the expected time range (24 hours and 7 days)
    expected_range = pd.date_range(start='00:00:00', end='23:59:59', freq='H')
    expected_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

    # Create a boolean series indicating if each (id, id_2) pair has incorrect timestamps
    incorrect_timestamps = df.groupby(['id', 'id_2']).apply(lambda group: not (
        group['startTimestamp'].min() <= group['endTimestamp'].max() <= group['startTimestamp'].max() <= group['endTimestamp'].min()
        and set(group['startTimestamp'].dt.hour) == set(expected_range.hour)
        and set(group['startDay']) == set(expected_days)
    ))

    return incorrect_timestamps

incorrect_timestamps = time_check(df2)

print(incorrect_timestamps)



